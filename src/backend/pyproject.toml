[tool.poetry]
name = "triang-api"
version = "0.1.0"
description = ""
authors = ["Henrique C. C. de Andrade <henrique.ccda@gmail.com>"]
license = "MIT"

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.104.1"
uvicorn = "^0.24.0.post1"
gunicorn = "^21.2.0"
pydantic-settings = "^2.1.0"


[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-cov = "^4.1.0"
taskipy = "^1.12.0"
black = "^23.11.0"
ruff = "^0.1.5"
httpx = "^0.25.1"
mypy = "^1.7.0"
ipython = "^8.17.2"
ipdb = "^0.13.13"
coverage = "^7.3.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.black]
line-length = 120
exclude = ".git, .venv"

[tool.ruff]
line-length = 120

select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP",  # pyupgrade
]

exclude = [
    ".venv"
]

[tool.pytest.ini_options]
addopts = "-ra -vv"
testpaths = [
    "tests",
    "--strict-markers",
]
markers=[
    "unitary: marks unitary tests",
    "integration: marks integration testes",
]

[tool.mypy]
warn_return_any = true
warn_unused_configs = true
pretty = true

[tool.taskipy.variables]
src_module = "api"

[tool.taskipy.tasks]
fmt_black = {cmd="poetry run black {src_module} tests", help="Chamando do black.", use_vars = true}
fmt_ruff= {cmd="poetry run ruff {src_module} tests --fix", help="Chamando do ruff.", use_vars = true}
fmt = {cmd="task fmt_ruff && task fmt_black", help="Formatador do c√≥digo."}

lin_mypy = {cmd="mypy --package tests --package api", help="Analiasador estatico de tipos."}
lin_ruff = {cmd="poetry run ruff check {src_module} tests", help="Linter com o Ruff.", use_vars = true}
linter = {cmd="task lin_mypy && task lin_ruff", help="Linter."}

test = {cmd="pytest", help="Rodando os testes."}
test_cov = {cmd="pytest --cov-report html --cov=api", help="Rodando os testes com cobertura."}

server_coverage = {cmd="python -m http.server 8001 -d htmlcov", help="Mostrando o relatorio de cobertura de teste."}

server = {cmd="uvicorn api.app:app --reload", help="Subindo o servidor."}

server_prod = {cmd="gunicorn api.app:app --workers 3 --worker-class uvicorn.workers.UvicornWorker --bind localhost:8000 --log-file=-  --access-logfile=-", help="Subindo gunicorn+uvicorn."}
